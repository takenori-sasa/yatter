// Code generated by MockGen. DO NOT EDIT.
// Source: app/domain/repository/status.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"
	object "yatter-backend-go/app/domain/object"

	gomock "go.uber.org/mock/gomock"
)

// MockStatus is a mock of Status interface.
type MockStatus struct {
	ctrl     *gomock.Controller
	recorder *MockStatusMockRecorder
}

// MockStatusMockRecorder is the mock recorder for MockStatus.
type MockStatusMockRecorder struct {
	mock *MockStatus
}

// NewMockStatus creates a new mock instance.
func NewMockStatus(ctrl *gomock.Controller) *MockStatus {
	mock := &MockStatus{ctrl: ctrl}
	mock.recorder = &MockStatusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatus) EXPECT() *MockStatusMockRecorder {
	return m.recorder
}

// CreateStatus mocks base method.
func (m *MockStatus) CreateStatus(ctx context.Context, status *object.Status) (*object.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStatus", ctx, status)
	ret0, _ := ret[0].(*object.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStatus indicates an expected call of CreateStatus.
func (mr *MockStatusMockRecorder) CreateStatus(ctx, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStatus", reflect.TypeOf((*MockStatus)(nil).CreateStatus), ctx, status)
}

// DeleteStatus mocks base method.
func (m *MockStatus) DeleteStatus(ctx context.Context, statusID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStatus", ctx, statusID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStatus indicates an expected call of DeleteStatus.
func (mr *MockStatusMockRecorder) DeleteStatus(ctx, statusID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStatus", reflect.TypeOf((*MockStatus)(nil).DeleteStatus), ctx, statusID)
}

// FindStatus mocks base method.
func (m *MockStatus) FindStatus(ctx context.Context, statusID int64) (*object.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStatus", ctx, statusID)
	ret0, _ := ret[0].(*object.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStatus indicates an expected call of FindStatus.
func (mr *MockStatusMockRecorder) FindStatus(ctx, statusID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStatus", reflect.TypeOf((*MockStatus)(nil).FindStatus), ctx, statusID)
}
